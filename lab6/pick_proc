/*===========================================================================*
 *                              pick_proc                                    *
 *===========================================================================*/
static struct proc * pick_proc(void)
{
/* Decide who to run now.  A new process is selected an returned.
 * When a billable process is selected, record it in 'bill_ptr', so that the
 * clock task can tell who to bill for system time.
 *
 * This function always uses the run queues of the local cpu!
 */
  register struct proc *rp;                     /* process to run */
  struct proc **rdy_head;
  int q;                                /* iterate over queues */

  /* Check each of the scheduling queues for ready processes. The number of
   * queues is defined in proc.h, and priorities are set in the task table.
   * If there are no processes ready to run, return NULL.
   */
  rdy_head = get_cpulocal_var(run_q_head);
  for (q=0; q < NR_SCHED_QUEUES; q++) {
        // set rp pointing to queue head
        if(!(rp = rdy_head[q])) {
                TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n",
cpuid, q););
                continue;
        }
        // start lottery algorithm
        //if(0){
        if(rp->tickets && rp->tickets>0){
           int sum=0; // to find winning ticket
           // get winner ticket randomly
           int winner = rand() % total_qty_tickets;
           // find winning ticket and process that contains it
           while(sum < winner && rp->p_nextready!=NULL){
                sum += rp->tickets;
                if(sum < winner)
                        rp = rp->p_nextready;
           }
           total_qty_tickets -= rp->tickets;
        }
        assert(proc_is_runnable(rp));
        if (priv(rp)->s_flags & BILLABLE)
                get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
        return rp;
  }
  return NULL;
}

